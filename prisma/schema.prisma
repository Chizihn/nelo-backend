// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  whatsappNumber       String        @unique
  walletAddress        String        @unique
  basename             String?       @unique
  basenameVerified     Boolean       @default(false)
  encryptedPrivateKey  String
  publicKey            String
  isActive             Boolean       @default(true)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  
  // Relations
  virtualCards         VirtualCard[]
  transactions         Transaction[]
  sessions             Session[]
  
  @@map("users")
}

model VirtualCard {
  id              String            @id @default(uuid())
  userId          String
  cardNumber      String            @unique
  tokenId         String            @unique
  contractAddress String
  balance         Decimal           @default(0) @db.Decimal(18, 8)
  cnmgBalance     Decimal           @default(0) @db.Decimal(18, 8)
  status          VirtualCardStatus @default(ACTIVE)
  lastUsedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  
  @@map("virtual_cards")
}

model Transaction {
  id          String            @id @default(uuid())
  userId      String
  cardId      String?
  type        TransactionType
  amount      Decimal           @db.Decimal(18, 8)
  currency    String            @default("CNMG")
  txHash      String?           @unique
  status      TransactionStatus @default(PENDING)
  description String?
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  card        VirtualCard?      @relation(fields: [cardId], references: [id], onDelete: SetNull)
  
  @@map("transactions")
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  sessionData Json
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

enum VirtualCardStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

enum TransactionType {
  ONRAMP
  OFFRAMP
  DEPOSIT
  WITHDRAWAL
  PAYMENT
  REFUND
  BRIDGE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}